extends Node2D

# --- C·∫§U H√åNH ---
const SERVER_PORT = 7777 # C·ªïng mu·ªën m·ªü (ph·∫£i n·∫±m trong kho·∫£ng 1024 - 65535)

# Bi·∫øn l∆∞u lu·ªìng x·ª≠ l√Ω (thread), danh s√°ch thi·∫øt b·ªã v√† gateway ch√≠nh
var upnp_thread: Thread
var upnp: UPNP
var devices: Array = []
var gateway_device: UPNPDevice = null

# --- S·ª∞ KI·ªÜN (Signal) ---
signal upnp_device_completed(error)

func _ready():
	# Kh·ªüi ch·∫°y thread ƒë·ªÉ tr√°nh treo giao di·ªán khi th·ª±c hi·ªán t√°c v·ª• blocking
	upnp_thread = Thread.new()
	upnp_thread.start(self, "_run_upnp_device_procedure", SERVER_PORT)

func _run_upnp_device_procedure(port):
	upnp = UPNP.new()

	# 1. discover() - T√¨m t·∫•t c·∫£ thi·∫øt b·ªã UPnP tr√™n m·∫°ng
	print("üîç ƒêang qu√©t m·∫°ng ƒë·ªÉ t√¨m thi·∫øt b·ªã h·ªó tr·ª£ UPNP...")
	var error = upnp.discover()
	if error != UPNP.UPNP_RESULT_SUCCESS:
		print("‚ùå L·ªói ph√°t hi·ªán thi·∫øt b·ªã UPNP:", error)
		emit_signal("upnp_device_completed", error)
		return

	# 2. get_device_count() - L·∫•y t·ªïng s·ªë thi·∫øt b·ªã ph√°t hi·ªán ƒë∆∞·ª£c
	var device_count = upnp.get_device_count()
	print("üì¶ S·ªë l∆∞·ª£ng thi·∫øt b·ªã UPNP ph√°t hi·ªán ƒë∆∞·ª£c:", device_count)

	if device_count == 0:
		print("üö´ Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã UPNP n√†o.")
		emit_signal("upnp_device_completed", UPNP.UPNP_RESULT_NO_DEVICES)
		return

	# 3. get_device(index) - L·∫•y t·ª´ng thi·∫øt b·ªã v√† ki·ªÉm tra xem c√≥ ph·∫£i l√† gateway h·ª£p l·ªá
	for i in range(device_count):
		var device: UPNPDevice = upnp.get_device(i)
		if device.is_valid_gateway():
			gateway_device = device
			break

	if not gateway_device or not gateway_device.is_valid_gateway():
		print("‚ùå Kh√¥ng t√¨m th·∫•y gateway h·ª£p l·ªá.")
		emit_signal("upnp_device_completed", UPNP.UPNP_RESULT_INVALID_GATEWAY)
		return

	# 4. is_valid_gateway() - Ki·ªÉm tra xem c√≥ th·ªÉ d√πng c·ªïng n√†y hay kh√¥ng
	if not gateway_device.is_valid_gateway():
		print("‚ö†Ô∏è Gateway kh√¥ng h·ªó tr·ª£ m·ªü c·ªïng.")
		emit_signal("upnp_device_completed", UPNP.UPNP_RESULT_ACTION_FAILED)
		return

	# 5. query_external_address() - L·∫•y ƒë·ªãa ch·ªâ IP c√¥ng c·ªông t·ª´ gateway
	var external_ip = gateway_device.query_external_address()
	if external_ip == "":
		print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ IP c√¥ng c·ªông.")
	else:
		print("üåê ƒê·ªãa ch·ªâ IP c√¥ng c·ªông:", external_ip)

	# 6. add_port_mapping(...) - Th√™m √°nh x·∫° c·ªïng TCP & UDP
	error = gateway_device.add_port_mapping(port, 0, "MyGodotGameServer", "UDP")
	if error != UPNP.UPNP_RESULT_SUCCESS:
		print("‚ùå L·ªói m·ªü c·ªïng UDP:", error)
	else:
		print("‚úÖ M·ªü c·ªïng UDP th√†nh c√¥ng!")

	error = gateway_device.add_port_mapping(port, 0, "MyGodotGameServer", "TCP")
	if error != UPNP.UPNP_RESULT_SUCCESS:
		print("‚ùå L·ªói m·ªü c·ªïng TCP:", error)
	else:
		print("‚úÖ M·ªü c·ªïng TCP th√†nh c√¥ng!")

	# G·ª≠i t√≠n hi·ªáu ho√†n t·∫•t
	emit_signal("upnp_device_completed", UPNP.UPNP_RESULT_SUCCESS)

func _on_upnp_device_completed(error):
	match error:
		UPNP.UPNP_RESULT_SUCCESS:
			print("üéâ UPNP DEVICE: C·ªïng ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng!")
		UPNP.UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING:
			print("‚ö†Ô∏è C·ªïng ƒë√£ t·ªìn t·∫°i √°nh x·∫° kh√°c. H√£y th·ª≠ c·ªïng kh√°c.")
		UPNP.UPNP_RESULT_SOCKET_ERROR:
			print("üîå C√≥ l·ªói k·∫øt n·ªëi socket.")
		UPNP.UPNP_RESULT_NO_GATEWAY:
			print("üö´ Kh√¥ng t√¨m th·∫•y gateway h·ªó tr·ª£ UPNP.")
		_:
			print("‚ùó UPNP DEVICE: Th·∫•t b·∫°i v·ªõi m√£ l·ªói:", error)

func _input(event):
	# Nh·∫•n ph√≠m ESC ƒë·ªÉ ƒë√≥ng c·ªïng
	if event is InputEventKey and event.pressed and event.scancode == KEY_ESCAPE:
		_close_port(SERVER_PORT)

func _close_port(port):
	if gateway_device:
		# 7. delete_port_mapping(...) - X√≥a c·ªïng TCP v√† UDP
		var err_udp = gateway_device.delete_port_mapping(port, "UDP")
		var err_tcp = gateway_device.delete_port_mapping(port, "TCP")

		if err_udp == UPNP.UPNP_RESULT_SUCCESS:
			print("üîì ƒê√£ x√≥a c·ªïng UDP th√†nh c√¥ng.")
		if err_tcp == UPNP.UPNP_RESULT_SUCCESS:
			print("üîì ƒê√£ x√≥a c·ªïng TCP th√†nh c√¥ng.")

func _exit_tree():
	# N·∫øu c√≤n thread ƒëang ch·∫°y th√¨ ch·ªù n√≥ xong tr∆∞·ªõc khi tho√°t
	if upnp_thread and upnp_thread.is_started():
		upnp_thread.wait_to_finish()
